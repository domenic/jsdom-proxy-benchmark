"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const utils = require("./utils");
const Path = require("path");
const Builder_1 = require("./Builder");
var __awaiter = require('./awaiter');
/*@internal*/
class Import extends Builder_1.default {
    constructor(spec, node, importLocation, relativeRoot) {
        super(spec, node);
        this.importLocation = importLocation;
        this.relativeRoot = relativeRoot;
    }
    static build(spec, node, root) {
        return __awaiter(this, void 0, void 0, function* () {
            const href = node.getAttribute('href');
            const importPath = Path.join(root, href);
            const relativeRoot = Path.dirname(importPath);
            const imp = new Import(spec, node, importPath, relativeRoot);
            spec.imports.push(imp);
            const html = yield spec.fetch(importPath);
            const importDoc = yield utils.htmlToDom(html).window.document;
            const nodes = importDoc.body.childNodes;
            const frag = spec.doc.createDocumentFragment();
            for (let i = 0; i < nodes.length; i++) {
                const node = nodes[i];
                const importedNode = spec.doc.importNode(node, true);
                frag.appendChild(importedNode);
            }
            node.appendChild(frag);
            return imp;
        });
    }
}
exports.default = Import;
