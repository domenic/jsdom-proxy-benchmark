"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Builder_1 = require("./Builder");
const emd = require("ecmarkdown");
const utils = require("./utils");
/*@internal*/
class Eqn extends Builder_1.default {
    constructor(spec, node, clauseId) {
        super(spec, node);
        this.aoid = node.getAttribute('aoid');
        this.clauseId = clauseId;
        this.id = node.getAttribute('id');
        if (this.aoid) {
            if (this.id) {
                this.spec.biblio.add({
                    type: 'op',
                    aoid: this.aoid,
                    id: this.id,
                    referencingIds: []
                });
            }
            else {
                this.spec.biblio.add({
                    type: 'op',
                    aoid: this.aoid,
                    refId: this.clauseId,
                    referencingIds: []
                });
            }
        }
    }
    static enter(context) {
        const { spec, node, clauseStack } = context;
        const clause = clauseStack[clauseStack.length - 1];
        const id = clause ? clause.id : ''; // TODO: no eqns outside of clauses, eh?
        const eqn = new Eqn(spec, node, id);
        let contents = emd.document(node.innerHTML).slice(3, -4);
        if (utils.shouldInline(node)) {
            const classString = node.getAttribute('class');
            let classes;
            if (classString) {
                classes = classString.split(' ');
            }
            else {
                classes = [];
            }
            if (classes.indexOf('inline') === -1) {
                node.setAttribute('class', classes.concat(['inline']).join(' '));
            }
        }
        else {
            contents = '<div>' + contents.split(/\r?\n/g)
                .filter(s => s.trim().length > 0)
                .join('</div><div>') + '</div>';
        }
        node.innerHTML = contents;
    }
    static exit(context) { }
}
Eqn.elements = ['EMU-EQN'];
exports.default = Eqn;
