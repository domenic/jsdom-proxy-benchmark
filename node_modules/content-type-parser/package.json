{
  "_args": [
    [
      {
        "raw": "content-type-parser@^1.0.1",
        "scope": null,
        "escapedName": "content-type-parser",
        "name": "content-type-parser",
        "rawSpec": "^1.0.1",
        "spec": ">=1.0.1 <2.0.0",
        "type": "range"
      },
      "C:\\Users\\Domenic\\Dropbox\\GitHub\\jsdom-proxy-benchmark\\node_modules\\jsdom"
    ]
  ],
  "_from": "content-type-parser@>=1.0.1 <2.0.0",
  "_id": "content-type-parser@1.0.1",
  "_inCache": true,
  "_location": "/content-type-parser",
  "_nodeVersion": "6.2.2",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/content-type-parser-1.0.1.tgz_1476569899741_0.47508528595790267"
  },
  "_npmUser": {
    "name": "domenic",
    "email": "d@domenic.me"
  },
  "_npmVersion": "3.9.5",
  "_phantomChildren": {},
  "_requested": {
    "raw": "content-type-parser@^1.0.1",
    "scope": null,
    "escapedName": "content-type-parser",
    "name": "content-type-parser",
    "rawSpec": "^1.0.1",
    "spec": ">=1.0.1 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/jsdom"
  ],
  "_resolved": "https://registry.npmjs.org/content-type-parser/-/content-type-parser-1.0.1.tgz",
  "_shasum": "c3e56988c53c65127fb46d4032a3a900246fdc94",
  "_shrinkwrap": null,
  "_spec": "content-type-parser@^1.0.1",
  "_where": "C:\\Users\\Domenic\\Dropbox\\GitHub\\jsdom-proxy-benchmark\\node_modules\\jsdom",
  "author": {
    "name": "Domenic Denicola",
    "email": "d@domenic.me",
    "url": "https://domenic.me/"
  },
  "bugs": {
    "url": "https://github.com/jsdom/content-type-parser/issues"
  },
  "dependencies": {},
  "description": "Parse the value of the Content-Type header",
  "devDependencies": {
    "eslint": "^3.8.0",
    "mocha": "^3.1.2"
  },
  "directories": {},
  "dist": {
    "shasum": "c3e56988c53c65127fb46d4032a3a900246fdc94",
    "tarball": "https://registry.npmjs.org/content-type-parser/-/content-type-parser-1.0.1.tgz"
  },
  "files": [
    "lib/"
  ],
  "gitHead": "a5581b8a0dfd7c358b71f22f387ca3308e6eb502",
  "homepage": "https://github.com/jsdom/content-type-parser#readme",
  "keywords": [
    "content-type",
    "http"
  ],
  "license": "WTFPL",
  "main": "lib/content-type-parser.js",
  "maintainers": [
    {
      "name": "domenic",
      "email": "d@domenic.me"
    }
  ],
  "name": "content-type-parser",
  "optionalDependencies": {},
  "readme": "# Parse `Content-Type` Header Strings\n\nThis package will parse the [`Content-Type`](https://tools.ietf.org/html/rfc7231#section-3.1.1.1) header field into an introspectable data structure, whose parameters can be manipulated:\n\n```js\nconst contentTypeParser = require(\"content-type-parser\");\n\nconst contentType = contentTypeParser(`Text/HTML;Charset=\"utf-8\"`);\n\nconsole.assert(contentType.toString() === \"text/html;charset=utf-8\");\n\nconsole.assert(contentType.type === \"text\");\nconsole.assert(contentType.subtype === \"html\");\nconsole.assert(contentType.get(\"charset\") === \"utf-8\");\n\ncontentType.set(\"charset\", \"windows-1252\");\nconsole.assert(contentType.get(\"charset\") === \"windows-1252\");\nconsole.assert(contentType.toString() === \"text/html;charset=windows-1252\");\n\nconsole.assert(contentType.isHTML() === true);\nconsole.assert(contentType.isXML() === false);\nconsole.assert(contentType.isText() === true);\n```\n\nNote how parsing will lowercase the type, subtype, and parameter name tokens (but not parameter values).\n\nIf the passed string cannot be parsed as a content-type, `contentTypeParser` will return `null`.\n\n## `ContentType` instance API\n\nThis package's main module's default export will return an instance of the `ContentType` class, which has the following public APIs:\n\n### Properties\n\n- `type`: the top-level media type, e.g. `\"text\"`\n- `subtype`: the subtype, e.g. `\"html\"`\n- `parameterList`: an array of `{ separator, key, value }` pairs representing the parameters. The `separator` field contains any whitespace, not just the `;` character.\n\n### Parameter manipulation\n\nIn general you should not directly manipulate `parameterList`. Instead, use the following APIs:\n\n- `get(\"key\")`: returns the value of the parameter with the given key, or `undefined` if no such parameter is present\n- `set(\"key\", \"value\")`: adds the given key/value pair to the parameter list, or overwrites the existing value if an entry already existed\n\nBoth of these will lowercase the keys.\n\n### MIME type tests\n\n- `isHTML()`: returns true if this instance's MIME type is [the HTML MIME type](https://html.spec.whatwg.org/multipage/infrastructure.html#html-mime-type), `\"text/html\"`\n- `isXML()`: returns true if this instance's MIME type is [an XML MIME type](https://html.spec.whatwg.org/multipage/infrastructure.html#xml-mime-type)\n- `isText()`: returns true if this instance's top-level media type is `\"text\"`\n\n### Serialization\n\n- `toString()` will return a canonicalized representation of the content-type, re-built from the parsed components\n\n## Credits\n\nThis package was originally based on the excellent work of [@nicolashenry](https://github.com/nicolashenry), [in jsdom](https://github.com/tmpvar/jsdom/blob/16fd85618f2705d181232f6552125872a37164bc/lib/jsdom/living/helpers/headers.js). It has since been pulled out into this separate package.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/jsdom/content-type-parser.git"
  },
  "scripts": {
    "lint": "eslint lib test",
    "test": "mocha"
  },
  "version": "1.0.1"
}
