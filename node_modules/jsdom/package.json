{
  "_args": [
    [
      {
        "raw": "jsdom@^11.2.0",
        "scope": null,
        "escapedName": "jsdom",
        "name": "jsdom",
        "rawSpec": "^11.2.0",
        "spec": ">=11.2.0 <12.0.0",
        "type": "range"
      },
      "C:\\Users\\Domenic\\Dropbox\\GitHub\\jsdom-proxy-benchmark"
    ]
  ],
  "_from": "jsdom@>=11.2.0 <12.0.0",
  "_id": "jsdom@11.2.0",
  "_inCache": true,
  "_location": "/jsdom",
  "_nodeVersion": "8.3.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/jsdom-11.2.0.tgz_1503331016670_0.6520757651887834"
  },
  "_npmUser": {
    "name": "domenic",
    "email": "d@domenic.me"
  },
  "_npmVersion": "5.3.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "jsdom@^11.2.0",
    "scope": null,
    "escapedName": "jsdom",
    "name": "jsdom",
    "rawSpec": "^11.2.0",
    "spec": ">=11.2.0 <12.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/",
    "/ecmarkup"
  ],
  "_resolved": "https://registry.npmjs.org/jsdom/-/jsdom-11.2.0.tgz",
  "_shasum": "4f6b8736af3357c3af7227a3b54a5bda1c513fd6",
  "_shrinkwrap": null,
  "_spec": "jsdom@^11.2.0",
  "_where": "C:\\Users\\Domenic\\Dropbox\\GitHub\\jsdom-proxy-benchmark",
  "browser": {
    "canvas": false,
    "vm": "./lib/jsdom/vm-shim.js"
  },
  "bugs": {
    "url": "https://github.com/tmpvar/jsdom/issues"
  },
  "dependencies": {
    "abab": "^1.0.3",
    "acorn": "^4.0.4",
    "acorn-globals": "^3.1.0",
    "array-equal": "^1.0.0",
    "content-type-parser": "^1.0.1",
    "cssom": ">= 0.3.2 < 0.4.0",
    "cssstyle": ">= 0.2.37 < 0.3.0",
    "escodegen": "^1.6.1",
    "html-encoding-sniffer": "^1.0.1",
    "nwmatcher": "^1.4.1",
    "parse5": "^3.0.2",
    "pn": "^1.0.0",
    "request": "^2.79.0",
    "request-promise-native": "^1.0.3",
    "sax": "^1.2.1",
    "symbol-tree": "^3.2.1",
    "tough-cookie": "^2.3.2",
    "webidl-conversions": "^4.0.0",
    "whatwg-encoding": "^1.0.1",
    "whatwg-url": "^6.1.0",
    "xml-name-validator": "^2.0.1"
  },
  "description": "A JavaScript implementation of many web standards",
  "devDependencies": {
    "benchmark": "1.0.0",
    "browserify": "^14.0.0",
    "chai": "^3.5.0",
    "colors": "^1.1.2",
    "ecstatic": "^2.1.0",
    "eslint": "^3.14.1",
    "eslint-plugin-html": "^2.0.0",
    "fs-readdir-recursive": "^1.0.0",
    "karma": "^1.4.1",
    "karma-browserify": "^5.1.1",
    "karma-chrome-launcher": "^2.0.0",
    "karma-mocha": "^1.3.0",
    "karma-mocha-webworker": "^1.3.0",
    "karma-sauce-launcher": "^1.1.0",
    "mocha": "^3.2.0",
    "mocha-sugar-free": "^1.3.1",
    "nodeunit": "0.10.2",
    "optimist": "0.6.1",
    "portfinder": "^1.0.13",
    "q": "^1.4.1",
    "rimraf": "^2.6.1",
    "selenium-standalone": "^6.0.1",
    "server-destroy": "^1.0.1",
    "st": "^1.2.0",
    "watchify": "^3.9.0",
    "wd": "^1.1.3",
    "webidl2js": "^7.3.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-+5wd6vJuh/Evw3wkmCuKXKibDd5RS7PYZjKaP4s2Hj5W7tvmbuFuaDN4erbH07VznTBFcK+lcsrGVnP6EugXow==",
    "shasum": "4f6b8736af3357c3af7227a3b54a5bda1c513fd6",
    "tarball": "https://registry.npmjs.org/jsdom/-/jsdom-11.2.0.tgz"
  },
  "gitHead": "fefa181e2417ea1d246ef2c6cabb12f11dcbb705",
  "homepage": "https://github.com/tmpvar/jsdom#readme",
  "keywords": [
    "dom",
    "html",
    "whatwg",
    "w3c"
  ],
  "license": "MIT",
  "main": "./lib/api.js",
  "maintainers": [
    {
      "name": "Elijah Insua",
      "email": "tmpvar@gmail.com",
      "url": "http://tmpvar.com"
    },
    {
      "name": "Domenic Denicola",
      "email": "d@domenic.me",
      "url": "https://domenic.me/"
    },
    {
      "name": "Sebastian Mayr",
      "email": "sebmaster16@gmail.com",
      "url": "http://blog.smayr.name/"
    },
    {
      "name": "Joris van der Wel",
      "email": "joris@jorisvanderwel.com"
    }
  ],
  "name": "jsdom",
  "optionalDependencies": {},
  "readme": "# jsdom\n\njsdom is a pure-JavaScript implementation of many web standards, notably the WHATWG [DOM](https://dom.spec.whatwg.org/) and [HTML](https://html.spec.whatwg.org/multipage/) Standards, for use with Node.js. In general, the goal of the project is to emulate enough of a subset of a web browser to be useful for testing and scraping real-world web applications.\n\nThe latest versions of jsdom require Node.js v6 or newer. (Versions of jsdom below v10 still work with Node.js v4, but are unsupported.)\n\nAs of v10, jsdom has a new API (documented below). The old API is still supported for now; [see its documentation](./lib/old-api.md) for details.\n\n## Basic usage\n\n```js\nconst jsdom = require(\"jsdom\");\nconst { JSDOM } = jsdom;\n```\n\nTo use jsdom, you will primarily use the `JSDOM` constructor, which is a named export of the jsdom main module. Pass the constructor a string. You will get back a `JSDOM` object, which has a number of useful properties, notably `window`:\n\n```js\nconst dom = new JSDOM(`<!DOCTYPE html><p>Hello world</p>`);\nconsole.log(dom.window.document.querySelector(\"p\").textContent); // \"Hello world\"\n```\n\n(Note that jsdom will parse the HTML you pass it just like a browser does, including implied `<html>`, `<head>`, and `<body>` tags.)\n\nThe resulting object is an instance of the `JSDOM` class, which contains a number of useful properties and methods besides `window`. In general it can be used to act on the jsdom from the \"outside,\" doing things that are not possible with the normal DOM APIs. For simple cases, where you don't need any of this functionality, we recommend a coding pattern like\n\n```js\nconst { window } = new JSDOM(`...`);\n// or even\nconst { document } = (new JSDOM(`...`)).window;\n```\n\nFull documentation on everything you can do with the `JSDOM` class is below, in the section \"`JSDOM` Object API\".\n\n## Customizing jsdom\n\nThe `JSDOM` constructor accepts a second parameter which can be used to customize your jsdom in the following ways.\n\n### Simple options\n\n```js\nconst dom = new JSDOM(``, {\n  url: \"https://example.org/\",\n  referrer: \"https://example.com/\",\n  contentType: \"text/html\",\n  userAgent: \"Mellblomenator/9000\",\n  includeNodeLocations: true\n});\n```\n\n- `url` sets the value returned by `window.location`, `document.URL`, and `document.documentURI`, and affects things like resolution of relative URLs within the document and the same-origin restrictions and referrer used while fetching subresources. It defaults to `\"about:blank\"`.\n- `referrer` just affects the value read from `document.referrer`. It defaults to no referrer (which reflects as the empty string).\n- `contentType` affects the value read from `document.contentType`, and how the document is parsed: as HTML or as XML. Values that are not `\"text/html\"` or an [XML mime type](https://html.spec.whatwg.org/multipage/infrastructure.html#xml-mime-type) will throw. It defaults to `\"text/html\"`.\n- `userAgent` affects the value read from `navigator.userAgent`, as well as the `User-Agent` header sent while fetching subresources. It defaults to <code>\\`Mozilla/5.0 (${process.platform}) AppleWebKit/537.36 (KHTML, like Gecko) jsdom/${jsdomVersion}\\`</code>.\n- `includeNodeLocations` preserves the location info produced by the HTML parser, allowing you to retrieve it with the `nodeLocation()` method (described below). It defaults to `false` to give the best performance, and cannot be used with an XML content type since our XML parser does not support location info.\n\nNote that both `url` and `referrer` are canonicalized before they're used, so e.g. if you pass in `\"https:example.com\"`, jsdom will interpret that as if you had given `\"https://example.com/\"`. If you pass an unparseable URL, the call will throw. (URLs are parsed and serialized according to the [URL Standard](http://url.spec.whatwg.org/).)\n\n### Executing scripts\n\njsdom's most powerful ability is that it can execute scripts inside the jsdom. These scripts can modify the content of the page and access all the web platform APIs jsdom implements.\n\nHowever, this is also highly dangerous when dealing with untrusted content. The jsdom sandbox is not foolproof, and code running inside the DOM's `<script>`s can, if it tries hard enough, get access to the Node.js environment, and thus to your machine. As such, the ability to execute scripts embedded in the HTML is disabled by default:\n\n```js\nconst dom = new JSDOM(`<body>\n  <script>document.body.appendChild(document.createElement(\"hr\"));</script>\n</body>`);\n\n// The script will not be executed, by default:\ndom.window.document.body.children.length === 1;\n```\n\nTo enable executing scripts inside the page, you can use the `runScripts: \"dangerously\"` option:\n\n```js\nconst dom = new JSDOM(`<body>\n  <script>document.body.appendChild(document.createElement(\"hr\"));</script>\n</body>`, { runScripts: \"dangerously\" });\n\n// The script will be executed and modify the DOM:\ndom.window.document.body.children.length === 2;\n```\n\nAgain we emphasize to only use this when feeding jsdom code you know is safe. If you use it on arbitrary user-supplied code, or code from the Internet, you are effectively running untrusted Node.js code, and your machine could be compromised.\n\nNote that event handler attributes, like `<div onclick=\"\">`, will also not function unless `runScripts` is set to `\"dangerously\"`. (However, event handler _properties_, like `div.onclick = ...`, will function regardless of `runScripts`.)\n\nIf you are simply trying to execute script \"from the outside\", instead of letting `<script>` elements (and inline event handlers) run \"from the inside\", you can use the `runScripts: \"outside-only\"` option, which enables `window.eval`:\n\n```js\nconst window = (new JSDOM(``, { runScripts: \"outside-only\" })).window;\n\nwindow.eval(`document.body.innerHTML = \"<p>Hello, world!</p>\";`);\nwindow.document.body.children.length === 1;\n```\n\nThis is turned off by default for performance reasons, but is safe to enable.\n\nNote that we strongly advise against trying to \"execute scripts\" by mashing together the jsdom and Node global environments (e.g. by doing `global.window = dom.window`), and then executing scripts or test code inside the Node global environment. Instead, you should treat jsdom like you would a browser, and run all scripts and tests that need access to a DOM inside the jsdom environment, using `window.eval` or `runScripts: \"dangerously\"`. This might require, for example, creating a browserify bundle to execute as a `<script>` element—just like you would in a browser.\n\nFinally, for advanced use cases you can use the `dom.runVMScript(script)` method, documented below.\n\n### Loading subresources\n\nBy default, jsdom will not load any subresources such as scripts, stylesheets, images, or iframes. If you'd like jsdom to load such resources, you can pass the `resources: \"usable\"` option, which will load all usable resources. Those are:\n\n* Frames and iframes, via `<frame>` and `<iframe>`\n* Stylesheets, via `<link rel=\"stylesheet\">`\n* Scripts, via `<script>`, but only if `runScripts: \"dangerously\"` is also set\n* Images, via `<img>`, but only if the `canvas` (or `canvas-prebuilt`) npm package is also installed (see \"Canvas Support\" below)\n\nIn the future we plan to offer more customization of resource loading via this option, but for now the default and the `\"usable\"` option are the two modes offered.\n\n### Virtual consoles\n\nLike web browsers, jsdom has the concept of a \"console\". This records both information directly sent from the page, via scripts executing inside the document, as well as information from the jsdom implementation itself. We call the user-controllable console a \"virtual console\", to distinguish it from the Node.js `console` API and from the inside-the-page `window.console` API.\n\nBy default, the `JSDOM` constructor will return an instance with a virtual console that forwards all its output to the Node.js console. To create your own virtual console and pass it to jsdom, you can override this default by doing\n\n```js\nconst virtualConsole = new jsdom.VirtualConsole();\nconst dom = new JSDOM(``, { virtualConsole });\n```\n\nCode like this will create a virtual console with no behavior. You can give it behavior by adding event listeners for all the possible console methods:\n\n```js\nvirtualConsole.on(\"error\", () => { ... });\nvirtualConsole.on(\"warn\", () => { ... });\nvirtualConsole.on(\"info\", () => { ... });\nvirtualConsole.on(\"dir\", () => { ... });\n// ... etc. See https://console.spec.whatwg.org/#logging\n```\n\n(Note that it is probably best to set up these event listeners *before* calling `new JSDOM()`, since errors or console-invoking script might occur during parsing.)\n\nIf you simply want to redirect the virtual console output to another console, like the default Node.js one, you can do\n\n```js\nvirtualConsole.sendTo(console);\n```\n\nThere is also a special event, `\"jsdomError\"`, which will fire with error objects to report errors from jsdom itself. This is similar to how error messages often show up in web browser consoles, even if they are not initiated by `console.error`. So far, the following errors are output this way:\n\n- Errors loading or parsing subresources (scripts, stylesheets, frames, and iframes)\n- Script execution errors that are not handled by a window `onerror` event handler that returns `true` or calls `event.preventDefault()`\n- Not-implemented errors resulting from calls to methods, like `window.alert`, which jsdom does not implement, but installs anyway for web compatibility\n\nIf you're using `sendTo(c)` to send errors to `c`, by default it will call `console.error` with information from `\"jsdomError\"` events. If you'd prefer to maintain a strict one-to-one mapping of events to method calls, and perhaps handle `\"jsdomError\"`s yourself, then you can do\n\n```js\nvirtualConsole.sendTo(c, { omitJSDOMErrors: true });\n```\n\n### Cookie jars\n\nLike web browsers, jsdom has the concept of a cookie jar, storing HTTP cookies. Cookies that have a URL on the same domain as the document, and are not marked HTTP-only, are accessible via the `document.cookie` API. Additionally, all cookies in the cookie jar will impact the fetching of subresources.\n\nBy default, the `JSDOM` constructor will return an instance with an empty cookie jar. To create your own cookie jar and pass it to jsdom, you can override this default by doing\n\n```js\nconst cookieJar = new jsdom.CookieJar(store, options);\nconst dom = new JSDOM(``, { cookieJar });\n```\n\nThis is mostly useful if you want to share the same cookie jar among multiple jsdoms, or prime the cookie jar with certain values ahead of time.\n\nCookie jars are provided by the [tough-cookie](https://www.npmjs.com/package/tough-cookie) package. The `jsdom.CookieJar` constructor is a subclass of the tough-cookie cookie jar which by default sets the `looseMode: true` option, since that [matches better how browsers behave](https://github.com/whatwg/html/issues/804). If you want to use tough-cookie's utilities and classes yourself, you can use the `jsdom.toughCookie` module export to get access to the tough-cookie module instance packaged with jsdom.\n\n### Intervening before parsing\n\njsdom allows you to intervene in the creation of a jsdom very early: after the `Window` and `Document` objects are created, but before any HTML is parsed to populate the document with nodes:\n\n```js\nconst dom = new JSDOM(`<p>Hello</p>`, {\n  beforeParse(window) {\n    window.document.childNodes.length === 0;\n    window.someCoolAPI = () => { /* ... */ };\n  }\n});\n```\n\nThis is especially useful if you are wanting to modify the environment in some way, for example adding shims for web platform APIs jsdom does not support.\n\n## `JSDOM` object API\n\nOnce you have constructed a `JSDOM` object, it will have the following useful capabilities:\n\n### Properties\n\nThe property `window` retrieves the `Window` object that was created for you.\n\nThe properties `virtualConsole` and `cookieJar` reflect the options you pass in, or the defaults created for you if nothing was passed in for those options.\n\n### Serializing the document with `serialize()`\n\nThe `serialize()` method will return the [HTML serialization](https://html.spec.whatwg.org/#html-fragment-serialisation-algorithm) of the document, including the doctype:\n\n```js\nconst dom = new JSDOM(`<!DOCTYPE html>hello`);\n\ndom.serialize() === \"<!DOCTYPE html><html><head></head><body>hello</body></html>\";\n\n// Contrast with:\ndom.window.document.documentElement.outerHTML === \"<html><head></head><body>hello</body></html>\";\n```\n\n### Getting the source location of a node with `nodeLocation(node)`\n\nThe `nodeLocation()` method will find where a DOM node is within the source document, returning the [parse5 location info](https://www.npmjs.com/package/parse5#options-locationinfo) for the node:\n\n```js\nconst dom = new JSDOM(\n  `<p>Hello\n    <img src=\"foo.jpg\">\n  </p>`,\n  { includeNodeLocations: true }\n);\n\nconst document = dom.window.document;\nconst bodyEl = document.body; // implicitly created\nconst pEl = document.querySelector(\"p\");\nconst textNode = pEl.firstChild;\nconst imgEl = document.querySelector(\"img\");\n\nconsole.log(dom.nodeLocation(bodyEl));   // null; it's not in the source\nconsole.log(dom.nodeLocation(pEl));      // { startOffset: 0, endOffset: 39, startTag: ..., endTag: ... }\nconsole.log(dom.nodeLocation(textNode)); // { startOffset: 3, endOffset: 13 }\nconsole.log(dom.nodeLocation(imgEl));    // { startOffset: 13, endOffset: 32 }\n```\n\nNote that this feature only works if you have set the `includeNodeLocations` option; node locations are off by default for performance reasons.\n\n### Running vm-created scripts with `runVMScript(script)`\n\nThe built-in `vm` module of Node.js allows you to create `Script` instances, which can be compiled ahead of time and then run multiple times on a given \"VM context\". Behind the scenes, a jsdom `Window` is indeed a VM context. To get access to this ability, use the `runVMScript()` method:\n\n```js\nconst { Script } = require(\"vm\");\n\nconst dom = new JSDOM(``, { runScripts: \"outside-only\" });\nconst s = new Script(`\n  if (!this.ran) {\n    this.ran = 0;\n  }\n\n  ++this.ran;\n`);\n\ndom.runVMScript(s);\ndom.runVMScript(s);\ndom.runVMScript(s);\n\ndom.window.ran === 3;\n```\n\nThis is somewhat-advanced functionality, and we advise sticking to normal DOM APIs (such as `window.eval()` or `document.createElement(\"script\")`) unless you have very specific needs.\n\n### Reconfiguring the jsdom with `reconfigure(settings)`\n\nThe `top` property on `window` is marked `[Unforgeable]` in the spec, meaning it is a non-configurable own property and thus cannot be overridden or shadowed by normal code running inside the jsdom, even using `Object.defineProperty`.\n\nSimilarly, at present jsdom does not handle navigation (such as setting `window.location.href === \"https://example.com/\"`); doing so will cause the virtual console to emit a `\"jsdomError\"` explaining that this feature is not implemented, and nothing will change: there will be no new `Window` or `Document` object, and the existing `window`'s `location` object will still have all the same property values.\n\nHowever, if you're acting from outside the window, e.g. in some test framework that creates jsdoms, you can override one or both of these using the special `reconfigure()` method:\n\n```js\nconst dom = new JSDOM();\n\ndom.window.top === dom.window;\ndom.window.location.href === \"about:blank\";\n\ndom.reconfigure({ windowTop: myFakeTopForTesting, url: \"https://example.com/\" });\n\ndom.window.top === myFakeTopForTesting;\ndom.window.location.href === \"https://example.com/\";\n```\n\nNote that changing the jsdom's URL will impact all APIs that return the current document URL, such as `window.location`, `document.URL`, and `document.documentURI`, as well as resolution of relative URLs within the document, and the same-origin checks and referrer used while fetching subresources. It will not, however, perform a navigation to the contents of that URL; the contents of the DOM will remain unchanged, and no new instances of `Window`, `Document`, etc. will be created.\n\n## Convenience APIs\n\n### `fromURL()`\n\nIn addition to the `JSDOM` constructor itself, jsdom provides a promise-returning factory method for constructing a jsdom from a URL:\n\n```js\nJSDOM.fromURL(\"https://example.com/\", options).then(dom => {\n  console.log(dom.serialize());\n});\n```\n\nThe returned promise will fulfill with a `JSDOM` instance if the URL is valid and the request is successful. Any redirects will be followed to their ultimate destination.\n\nThe options provided to `fromURL()` are similar to those provided to the `JSDOM` constructor, with the following additional restrictions and consequences:\n\n- The `url` and `contentType` options cannot be provided.\n- The `referrer` option is used as the HTTP `Referer` request header of the initial request.\n- The `userAgent` option is used as the HTTP `User-Agent` request header of any requests.\n- The resulting jsdom's URL, content type, and referrer are determined from the response.\n- Any cookies set via HTTP `Set-Cookie` response headers are stored in the jsdom's cookie jar. Similarly, any cookies already in a supplied cookie jar are sent as HTTP `Cookie` request headers.\n\nThe initial request is not infinitely customizable to the same extent as is possible in a package like [request](https://www.npmjs.com/package/request); `fromURL()` is meant to be a convenience API for the majority of cases. If you need greater control over the initial request, you should perform it yourself, and then use the `JSDOM` constructor manually.\n\n### `fromFile()`\n\nSimilar to `fromURL()`, jsdom also provides a `fromFile()` factory method for constructing a jsdom from a filename:\n\n```js\nJSDOM.fromFile(\"stuff.html\", options).then(dom => {\n  console.log(dom.serialize());\n});\n```\n\nThe returned promise will fulfill with a `JSDOM` instance if the given file can be opened. As usual in Node.js APIs, the filename is given relative to the current working directory.\n\nThe options provided to `fromFile()` are similar to those provided to the `JSDOM` constructor, with the following additional defaults:\n\n- The `url` option will default to a file URL corresponding to the given filename, instead of to `\"about:blank\"`.\n- The `contentType` option will default to `\"application/xhtml+xml\"` if the given filename ends in `.xhtml` or `.xml`; otherwise it will continue to default to `\"text/html\"`.\n\n### `fragment()`\n\nFor the very simplest of cases, you might not need a whole `JSDOM` instance with all its associated power. You might not even need a `Window` or `Document`! Instead, you just need to parse some HTML, and get a DOM object you can manipulate. For that, we have `fragment()`, which creates a `DocumentFragment` from a given string:\n\n```js\nconst frag = JSDOM.fragment(`<p>Hello</p><p><strong>Hi!</strong>`);\n\nfrag.childNodes.length === 2;\nfrag.querySelector(\"strong\").textContent = \"Why hello there!\";\n// etc.\n```\n\nHere `frag` is a [`DocumentFragment`](https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment) instance, whose contents are created by parsing the provided string. The parsing is done using a `<template>` element, so you can include any element there (including ones with weird parsing rules like `<td>`).\n\nAll invocations of the `framgment()` factory result in `DocumentFragment`s that share the same owner `Document` and `Window`. This allows many calls to `fragment()` with no extra overhead. But it also means that calls to `fragment()` cannot be customized with any options.\n\nNote that serialization is not as easy with `DocumentFragment`s as it is with full `JSDOM` objects. If you need to serialize your DOM, you should probably use the `JSDOM` constructor more directly. But for the special case of a fragment containing a single element, it's pretty easy to do through normal means:\n\n```js\nconst frag = JSDOM.fragment(`<p>Hello</p>`);\nconsole.log(frag.firstChild.outerHTML); // logs \"<p>Hello</p>\"\n```\n\n## Other noteworthy features\n\n### Canvas support\n\njsdom includes support for using the [`canvas`](https://www.npmjs.com/package/canvas) or [`canvas-prebuilt`](https://npmjs.org/package/canvas-prebuilt) package to extend any `<canvas>` elements with the canvas API. To make this work, you need to include `canvas` as a dependency in your project, as a peer of `jsdom`. If jsdom can find the `canvas` package, it will use it, but if it's not present, then `<canvas>` elements will behave like `<div>`s.\n\n### Encoding sniffing\n\nIn addition to supplying a string, the `JSDOM` constructor can also be supplied binary data, in the form of a Node.js [`Buffer`](https://nodejs.org/docs/latest/api/buffer.html) or a standard JavaScript binary data type like `ArrayBuffer`, `Uint8Array`, `DataView`, etc. When this is done, jsdom will [sniff the encoding](https://html.spec.whatwg.org/multipage/syntax.html#encoding-sniffing-algorithm) from the supplied bytes, scanning for `<meta charset>` tags just like a browser does.\n\nThis encoding sniffing also applies to `JSDOM.fromFile()` and `JSDOM.fromURL()`. In the latter case, just as in a browser, any `Content-Type` headers sent with the response will take priority.\n\nNote that in many cases supplying bytes in this fashion can be better than supplying a string. For example, if you attempt to use Node.js's `buffer.toString(\"utf-8\")` API, Node.js will not strip any leading BOMs. If you then give this string to jsdom, it will interpret it verbatim, leaving the BOM intact. But jsdom's binary data decoding code will strip leading BOMs, just like a browser; in such cases, supplying `buffer` directly will give the desired result.\n\n### Closing down a jsdom\n\nTimers in the jsdom (set by `window.setTimeout()` or `window.setInterval()`) will, by definition, execute code in the future in the context of the window. Since there is no way to execute code in the future without keeping the process alive, outstanding jsdom timers will keep your Node.js process alive. Similarly, since there is no way to execute code in the context of an object without keeping that object alive, outstanding jsdom timers will prevent garbage collection of the window on which they are scheduled.\n\nIf you want to be sure to shut down a jsdom window, use `window.close()`, which will terminate all running timers (and also remove any event listeners on the window and document).\n\n### Running jsdom inside a web browser\n\njsdom has some support for being run inside a web browser, using [browserify](https://browserify.org/). That is, inside a web browser, you can use a browserified jsdom to create an entirely self-contained set of plain JavaScript objects which look and act much like the browser's existing DOM objects, while being entirely independent of them. \"Virtual DOM\", indeed!\n\njsdom's primary target is still Node.js, and so we use language features that are only present in recent Node.js versions (namely, Node.js v6+). Thus, older browsers will likely not work. (Even transpilation will not help much: we plan to use `Proxy`s extensively throughout the course of jsdom v10.x.)\n\nNotably, jsdom works well inside a web worker. The original contributor, [@lawnsea](https://github.com/lawnsea/), who made this possible, has [published a paper](https://pdfs.semanticscholar.org/47f0/6bb6607a975500a30e9e52d7c9fbc0034e27.pdf) about his project which uses this capability.\n\nNot everything works perfectly when running jsdom inside a web browser. Sometimes that is because of fundamental limitations (such as not having filesystem access), but sometimes it is simply because we haven't spent enough time making the appropriate small tweaks. Bug reports are certainly welcome.\n\n## Caveats\n\n### Asynchronous script loading\n\nPeople often have trouble with asynchronous script loading when using jsdom. Many pages loads scripts asynchronously, but there is no way to tell when they're done doing so, and thus when it's a good time to run your code and inspect the resulting DOM structure. This is a fundamental limitation; we cannot predict what scripts on the web page will do, and so cannot tell you when they are done loading more scripts.\n\nThis can be worked around in a few ways. The best way, if you control the page in question, is to use whatever mechanisms are given by the script loader to detect when loading is done. For example, if you're using a module loader like RequireJS, the code could look like:\n\n```js\n// On the Node.js side:\nconst window = (new JSDOM(...)).window;\nwindow.onModulesLoaded = () => {\n  console.log(\"ready to roll!\");\n};\n```\n\n```html\n<!-- Inside the HTML you supply to jsdom -->\n<script>\nrequirejs([\"entry-module\"], () => {\n  window.onModulesLoaded();\n});\n</script>\n```\n\nIf you do not control the page, you could try workarounds such as polling for the presence of a specific element.\n\nFor more details, see the discussion in [#640](https://github.com/tmpvar/jsdom/issues/640), especially [@matthewkastor](https://github.com/matthewkastor)'s [insightful comment](https://github.com/tmpvar/jsdom/issues/640#issuecomment-22216965).\n\n### Shared constructors and prototypes\n\nAt the present time, for most web platform APIs, jsdom shares the same class definition between multiple seemingly-independent jsdoms. That means that, for example, the following situation can occur:\n\n```js\nconst dom1 = new JSDOM();\nconst dom2 = new JSDOM();\n\ndom1.window.Element.prototype.expando = \"blah\";\nconsole.log(dom2.window.document.createElement(\"frameset\").expando); // logs \"blah\"\n```\n\nThis is done mainly for performance and memory reasons: creating separate copies of all the many classes on the web platform, each time we create a jsdom, would be rather expensive.\n\nNevertheless, we remain interested in one day providing an option to create an \"independent\" jsdom, at the cost of some performance.\n\n### Missing features in the new API\n\nCompared to the old jsdom API from v9.x and before, the new API is noticably missing fine-grained control of resource loads. Previous versions of jsdom allowed you to set options that were used when making requests (both for the initial request, in the old equivalent of `JSDOM.fromURL()`, and for subresource requests). They also allowed you to control which subresources were requested and applied to the main document, so that you could e.g. download stylesheets but not scripts. Finally, they provided a customizable resource loader that let you intercept any outgoing request and fulfill it with a completely synthetic response.\n\nNone of these features are yet in the new jsdom API, although we are hoping to add them back soon! This requires a decent amount of behind-the-scenes work to implement in a reasonable way, unfortunately.\n\nIn the meantime, please feel free to use the old jsdom API to get access to this functionality. It is supported and maintained, although it will not be getting new features. The documentation is found in [lib/old-api.md](./lib/old-api.md).\n\n### Unimplemented parts of the web platform\n\nAlthough we enjoy adding new features to jsdom and keeping it up to date with the latest web specs, it has many missing APIs. Please feel free to file an issue for anything missing, but we're a small and busy team, so a pull request might work even better.\n\nBeyond just features that we haven't gotten to yet, there are two major features that are currently outside the scope of jsdom. These are:\n\n- **Navigation**: the ability to change the global object, and all other objects, when clicking a link or assigning `location.href` or similar.\n- **Layout**: the ability to calculate where elements will be visually laid out as a result of CSS, which impacts methods like `getBoundingClientRects()` or properties like `offsetTop`.\n\nCurrently jsdom has dummy behaviors for some aspects of these features, such as sending a \"not implemented\" `\"jsdomError\"` to the virtual console for navigation, or returning zeros for many layout-related properties. Often you can work around these limitations in your code, e.g. by creating new `JSDOM` instances for each page you \"navigate\" to during a crawl, or using `Object.defineProperty()` to change what various layout-related getters and methods return.\n\nNote that other tools in the same space, such as PhantomJS, do support these features. On the wiki, we have a more complete writeup about [jsdom vs. PhantomJS](https://github.com/tmpvar/jsdom/wiki/jsdom-vs.-PhantomJS).\n\n## Getting help\n\nIf you need help with jsdom, please feel free to use any of the following venues:\n\n- The [mailing list](http://groups.google.com/group/jsdom) (best for \"how do I\" questions)\n- The [issue tracker](https://github.com/tmpvar/jsdom/issues) (best for bug reports)\n- The IRC channel: [#jsdom on freenode](irc://irc.freenode.net/jsdom)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/tmpvar/jsdom.git"
  },
  "scripts": {
    "benchmark": "node ./benchmark/runner",
    "benchmark-browser": "node ./benchmark/runner --bundle",
    "convert-idl": "node ./scripts/webidl/convert",
    "lint": "eslint . && eslint test/web-platform-tests/to-upstream --ext .html",
    "prepublish": "npm run convert-idl",
    "pretest": "npm run convert-idl && git submodule update --init --recursive",
    "test": "npm run test-mocha-all && npm run test-old",
    "test-api": "mocha test/api",
    "test-browser": "npm run test-karma && npm run test-karma-worker && npm run test-browser-old",
    "test-browser-old": "node ./test/browser-runner",
    "test-karma": "karma start test/karma.conf.js",
    "test-karma-worker": "karma start test/karma-webworker.conf.js",
    "test-mocha": "mocha",
    "test-mocha-all": "mocha test/index.js",
    "test-old": "node ./test/runner",
    "test-tuwpt": "mocha test/web-platform-tests/to-upstream.js",
    "test-wpt": "mocha test/web-platform-tests/index.js",
    "update-authors": "git log --format=\"%aN <%aE>\" | sort -f | uniq > AUTHORS.txt"
  },
  "version": "11.2.0"
}
