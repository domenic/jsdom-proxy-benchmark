"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var path = require("path");
var fs = require("fs");
var os = require("os");
var url = require("url");
var Host;
(function (Host) {
    function getDefaultHost() {
        var ignoreCase = /^(win32|win64|darwin)$/.test(os.platform());
        function normalizeFile(file) {
            return ignoreCase ? file.toLowerCase() : file;
        }
        function isUri(file) {
            return !path.isAbsolute(file) && !!url.parse(file).protocol;
        }
        function isFileUri(file) {
            return /^file:\/\//.test(file);
        }
        function getLocalPath(file) {
            if (/^file:\/\//.test(file)) {
                var parsed = url.parse(file);
                if (parsed.hostname) {
                    file = "//" + parsed.hostname + decodeURIComponent(parsed.path);
                }
                else {
                    file = decodeURIComponent(parsed.path).substr(1);
                }
            }
            return file;
        }
        function resolveFile(file, referer) {
            var result;
            if (isFileUri(file) || path.isAbsolute(file)) {
                result = file;
            }
            else if (referer) {
                result = isFileUri(referer)
                    ? url.resolve(referer, file)
                    : path.resolve(path.dirname(referer), file);
            }
            else {
                result = path.resolve(file);
            }
            result = result.replace(/\\/g, "/");
            return result;
        }
        function readFile(file) {
            file = getLocalPath(file);
            if (isUri(file)) {
                return undefined;
            }
            try {
                return fs.readFileSync(file, "utf8");
            }
            catch (e) {
                return undefined;
            }
        }
        function writeFile(file, text) {
            fs.writeFileSync(file, text, "utf8");
        }
        return {
            normalizeFile: normalizeFile,
            resolveFile: resolveFile,
            readFile: readFile,
            writeFile: writeFile
        };
    }
    function getHost(readFileOrHostLike) {
        var host = getDefaultHost();
        if (typeof readFileOrHostLike === "function") {
            console.warn("Calling Host.getHost with a readFile function is an obsolete overload and will be removed in a future version.");
            host.readFile = readFileOrHostLike;
        }
        else if (typeof readFileOrHostLike === "object") {
            var hostLike_1 = readFileOrHostLike;
            if ("normalizeFile" in hostLike_1) {
                host.normalizeFile = function (file) { return hostLike_1.normalizeFile(file); };
            }
            if ("resolveFile" in hostLike_1) {
                host.resolveFile = function (file, referer) { return hostLike_1.resolveFile(file, referer); };
            }
            if ("writeFile" in hostLike_1) {
                host.writeFile = function (file, content) { return hostLike_1.writeFile(file, content); };
            }
            host.readFile = function (file) { return hostLike_1.readFile(file); };
        }
        return host;
    }
    Host.getHost = getHost;
})(Host = exports.Host || (exports.Host = {}));
//# sourceMappingURL=host.js.map
