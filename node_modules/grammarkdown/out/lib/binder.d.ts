import { CancellationToken } from "prex";
import { SyntaxKind } from "./tokens";
import { Symbol, SymbolKind, SymbolTable } from "./symbols";
import { SourceFile, Production, Parameter, Node } from "./nodes";
export declare class BindingTable {
    globals: SymbolTable;
    private parentNodes;
    private nodes;
    private nodeMap;
    private symbolReferences;
    private symbolLocals;
    private symbolDeclarations;
    setParent(node: Node, parent: Node): void;
    hasParent(node: Node): boolean;
    getParent(node: Node): Node;
    getAncestor(node: Node, kind: SyntaxKind): Node;
    setSymbol(node: Node, symbol: Symbol): void;
    private setSymbolForNode(node, symbol);
    private addReferenceToSymbol(symbol, node);
    hasSymbol(node: Node): boolean;
    getSymbol(node: Node): Symbol;
    addDeclarationToSymbol(symbol: Symbol, node: SourceFile | Production | Parameter): void;
    getDeclarations(symbol: Symbol): (SourceFile | Production | Parameter)[];
    getReferences(symbol: Symbol): Node[];
    getScope(container: Symbol): SymbolTable;
    resolveSymbol(location: Node, name: string, meaning: SymbolKind): Symbol;
}
export declare class Binder {
    private parentNode;
    private parentSymbol;
    private bindings;
    private scope;
    private cancellationToken;
    constructor(bindings: BindingTable, cancellationToken?: CancellationToken);
    bindSourceFile(file: SourceFile): void;
    private bindProduction(node);
    private bindParameter(node);
    private bindChildren(parentNode, parentSymbol, scope);
    private bind(node);
    private declareSymbol(name, declaration, kind);
}
