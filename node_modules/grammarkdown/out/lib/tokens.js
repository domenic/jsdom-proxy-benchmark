"use strict";
/*!
 *  Copyright 2015 Ron Buckton (rbuckton@chronicles.org)
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("./core");
var SyntaxKind;
(function (SyntaxKind) {
    SyntaxKind[SyntaxKind["Unknown"] = 0] = "Unknown";
    SyntaxKind[SyntaxKind["EndOfFileToken"] = 1] = "EndOfFileToken";
    // Significant Whitespace
    SyntaxKind[SyntaxKind["LineTerminatorToken"] = 2] = "LineTerminatorToken";
    SyntaxKind[SyntaxKind["IndentToken"] = 3] = "IndentToken";
    SyntaxKind[SyntaxKind["DedentToken"] = 4] = "DedentToken";
    // Literals
    SyntaxKind[SyntaxKind["StringLiteral"] = 5] = "StringLiteral";
    SyntaxKind[SyntaxKind["Terminal"] = 6] = "Terminal";
    SyntaxKind[SyntaxKind["UnicodeCharacterLiteral"] = 7] = "UnicodeCharacterLiteral";
    SyntaxKind[SyntaxKind["Prose"] = 8] = "Prose";
    SyntaxKind[SyntaxKind["ProseHead"] = 9] = "ProseHead";
    SyntaxKind[SyntaxKind["ProseMiddle"] = 10] = "ProseMiddle";
    SyntaxKind[SyntaxKind["ProseTail"] = 11] = "ProseTail";
    SyntaxKind[SyntaxKind["ProseFull"] = 12] = "ProseFull";
    // Punctuation
    SyntaxKind[SyntaxKind["AtToken"] = 13] = "AtToken";
    SyntaxKind[SyntaxKind["OpenBraceToken"] = 14] = "OpenBraceToken";
    SyntaxKind[SyntaxKind["CloseBraceToken"] = 15] = "CloseBraceToken";
    SyntaxKind[SyntaxKind["OpenBracketToken"] = 16] = "OpenBracketToken";
    SyntaxKind[SyntaxKind["OpenBracketGreaterThanToken"] = 17] = "OpenBracketGreaterThanToken";
    SyntaxKind[SyntaxKind["CloseBracketToken"] = 18] = "CloseBracketToken";
    SyntaxKind[SyntaxKind["GreaterThanToken"] = 19] = "GreaterThanToken";
    SyntaxKind[SyntaxKind["OpenParenToken"] = 20] = "OpenParenToken";
    SyntaxKind[SyntaxKind["CloseParenToken"] = 21] = "CloseParenToken";
    SyntaxKind[SyntaxKind["ColonToken"] = 22] = "ColonToken";
    SyntaxKind[SyntaxKind["ColonColonToken"] = 23] = "ColonColonToken";
    SyntaxKind[SyntaxKind["ColonColonColonToken"] = 24] = "ColonColonColonToken";
    SyntaxKind[SyntaxKind["CommaToken"] = 25] = "CommaToken";
    SyntaxKind[SyntaxKind["PlusToken"] = 26] = "PlusToken";
    SyntaxKind[SyntaxKind["TildeToken"] = 27] = "TildeToken";
    SyntaxKind[SyntaxKind["QuestionToken"] = 28] = "QuestionToken";
    SyntaxKind[SyntaxKind["EqualsToken"] = 29] = "EqualsToken";
    SyntaxKind[SyntaxKind["EqualsEqualsToken"] = 30] = "EqualsEqualsToken";
    SyntaxKind[SyntaxKind["ExclamationEqualsToken"] = 31] = "ExclamationEqualsToken";
    SyntaxKind[SyntaxKind["LessThanExclamationToken"] = 32] = "LessThanExclamationToken";
    SyntaxKind[SyntaxKind["LessThanMinusToken"] = 33] = "LessThanMinusToken";
    SyntaxKind[SyntaxKind["NotEqualToToken"] = 34] = "NotEqualToToken";
    SyntaxKind[SyntaxKind["ElementOfToken"] = 35] = "ElementOfToken";
    SyntaxKind[SyntaxKind["NotAnElementOfToken"] = 36] = "NotAnElementOfToken";
    // Identifiers
    SyntaxKind[SyntaxKind["Identifier"] = 37] = "Identifier";
    // Keywords
    SyntaxKind[SyntaxKind["ButKeyword"] = 38] = "ButKeyword";
    SyntaxKind[SyntaxKind["DefineKeyword"] = 39] = "DefineKeyword";
    SyntaxKind[SyntaxKind["EmptyKeyword"] = 40] = "EmptyKeyword";
    SyntaxKind[SyntaxKind["FalseKeyword"] = 41] = "FalseKeyword";
    SyntaxKind[SyntaxKind["GoalKeyword"] = 42] = "GoalKeyword";
    SyntaxKind[SyntaxKind["HereKeyword"] = 43] = "HereKeyword";
    SyntaxKind[SyntaxKind["ImportKeyword"] = 44] = "ImportKeyword";
    SyntaxKind[SyntaxKind["LexicalKeyword"] = 45] = "LexicalKeyword";
    SyntaxKind[SyntaxKind["LookaheadKeyword"] = 46] = "LookaheadKeyword";
    SyntaxKind[SyntaxKind["NoKeyword"] = 47] = "NoKeyword";
    SyntaxKind[SyntaxKind["NotKeyword"] = 48] = "NotKeyword";
    SyntaxKind[SyntaxKind["OfKeyword"] = 49] = "OfKeyword";
    SyntaxKind[SyntaxKind["OneKeyword"] = 50] = "OneKeyword";
    SyntaxKind[SyntaxKind["OrKeyword"] = 51] = "OrKeyword";
    SyntaxKind[SyntaxKind["ThroughKeyword"] = 52] = "ThroughKeyword";
    SyntaxKind[SyntaxKind["TrueKeyword"] = 53] = "TrueKeyword";
    // Nodes
    SyntaxKind[SyntaxKind["Parameter"] = 54] = "Parameter";
    SyntaxKind[SyntaxKind["ParameterList"] = 55] = "ParameterList";
    SyntaxKind[SyntaxKind["Argument"] = 56] = "Argument";
    SyntaxKind[SyntaxKind["ArgumentList"] = 57] = "ArgumentList";
    SyntaxKind[SyntaxKind["LinkReference"] = 58] = "LinkReference";
    SyntaxKind[SyntaxKind["Import"] = 59] = "Import";
    SyntaxKind[SyntaxKind["Define"] = 60] = "Define";
    SyntaxKind[SyntaxKind["Production"] = 61] = "Production";
    SyntaxKind[SyntaxKind["OneOfList"] = 62] = "OneOfList";
    SyntaxKind[SyntaxKind["RightHandSideList"] = 63] = "RightHandSideList";
    SyntaxKind[SyntaxKind["RightHandSide"] = 64] = "RightHandSide";
    SyntaxKind[SyntaxKind["SymbolSpan"] = 65] = "SymbolSpan";
    // Symbols
    SyntaxKind[SyntaxKind["ButNotSymbol"] = 66] = "ButNotSymbol";
    SyntaxKind[SyntaxKind["UnicodeCharacterRange"] = 67] = "UnicodeCharacterRange";
    SyntaxKind[SyntaxKind["OneOfSymbol"] = 68] = "OneOfSymbol";
    SyntaxKind[SyntaxKind["Nonterminal"] = 69] = "Nonterminal";
    SyntaxKind[SyntaxKind["TerminalList"] = 70] = "TerminalList";
    SyntaxKind[SyntaxKind["SymbolSet"] = 71] = "SymbolSet";
    // Zero-width Assertions
    SyntaxKind[SyntaxKind["EmptyAssertion"] = 72] = "EmptyAssertion";
    SyntaxKind[SyntaxKind["LookaheadAssertion"] = 73] = "LookaheadAssertion";
    SyntaxKind[SyntaxKind["LexicalGoalAssertion"] = 74] = "LexicalGoalAssertion";
    SyntaxKind[SyntaxKind["NoSymbolHereAssertion"] = 75] = "NoSymbolHereAssertion";
    SyntaxKind[SyntaxKind["ParameterValueAssertion"] = 76] = "ParameterValueAssertion";
    SyntaxKind[SyntaxKind["ProseAssertion"] = 77] = "ProseAssertion";
    // error nodes
    SyntaxKind[SyntaxKind["InvalidSymbol"] = 78] = "InvalidSymbol";
    SyntaxKind[SyntaxKind["InvalidAssertion"] = 79] = "InvalidAssertion";
    SyntaxKind[SyntaxKind["InvalidSourceElement"] = 80] = "InvalidSourceElement";
    // top nodes
    SyntaxKind[SyntaxKind["SourceFile"] = 81] = "SourceFile";
    SyntaxKind[SyntaxKind["FirstProseFragment"] = 9] = "FirstProseFragment";
    SyntaxKind[SyntaxKind["LastProseFragment"] = 11] = "LastProseFragment";
    SyntaxKind[SyntaxKind["FirstKeyword"] = 38] = "FirstKeyword";
    SyntaxKind[SyntaxKind["LastKeyword"] = 53] = "LastKeyword";
    SyntaxKind[SyntaxKind["FirstPunctuation"] = 13] = "FirstPunctuation";
    SyntaxKind[SyntaxKind["LastPunctuation"] = 33] = "LastPunctuation";
})(SyntaxKind = exports.SyntaxKind || (exports.SyntaxKind = {}));
var textToToken = new core_1.Dictionary({
    "but": SyntaxKind.ButKeyword,
    "define": SyntaxKind.DefineKeyword,
    "empty": SyntaxKind.EmptyKeyword,
    "false": SyntaxKind.FalseKeyword,
    "goal": SyntaxKind.GoalKeyword,
    "here": SyntaxKind.HereKeyword,
    "import": SyntaxKind.ImportKeyword,
    "lexical": SyntaxKind.LexicalKeyword,
    "lookahead": SyntaxKind.LookaheadKeyword,
    "no": SyntaxKind.NoKeyword,
    "not": SyntaxKind.NotKeyword,
    "of": SyntaxKind.OfKeyword,
    "one": SyntaxKind.OneKeyword,
    "or": SyntaxKind.OrKeyword,
    "through": SyntaxKind.ThroughKeyword,
    "true": SyntaxKind.TrueKeyword,
    "@": SyntaxKind.AtToken,
    ":": SyntaxKind.ColonToken,
    "::": SyntaxKind.ColonColonToken,
    ":::": SyntaxKind.ColonColonColonToken,
    "{": SyntaxKind.OpenBraceToken,
    "}": SyntaxKind.CloseBraceToken,
    "(": SyntaxKind.OpenParenToken,
    ")": SyntaxKind.CloseParenToken,
    "[": SyntaxKind.OpenBracketToken,
    "[>": SyntaxKind.OpenBracketGreaterThanToken,
    "]": SyntaxKind.CloseBracketToken,
    ">": SyntaxKind.GreaterThanToken,
    ",": SyntaxKind.CommaToken,
    "+": SyntaxKind.PlusToken,
    "~": SyntaxKind.TildeToken,
    "?": SyntaxKind.QuestionToken,
    "=": SyntaxKind.EqualsToken,
    "==": SyntaxKind.EqualsEqualsToken,
    "!=": SyntaxKind.ExclamationEqualsToken,
    "≠": SyntaxKind.NotEqualToToken,
    "<-": SyntaxKind.LessThanMinusToken,
    "∈": SyntaxKind.ElementOfToken,
    "<!": SyntaxKind.LessThanExclamationToken,
    "∉": SyntaxKind.NotAnElementOfToken,
});
var tokenToText = core_1.Dictionary.invert(textToToken);
function stringToToken(text) {
    return core_1.Dictionary.get(textToToken, text);
}
exports.stringToToken = stringToToken;
function tokenToString(kind, quoted) {
    if (kind in tokenToText) {
        var text = tokenToText[kind];
        return quoted ? "'" + text + "'" : text;
    }
    switch (kind) {
        case SyntaxKind.LineTerminatorToken:
            return "«line terminator»";
        case SyntaxKind.IndentToken:
            return "«indent»";
        case SyntaxKind.DedentToken:
            return "«dedent»";
        case SyntaxKind.Identifier:
            return "«identifier»";
        case SyntaxKind.Terminal:
            return "«terminal»";
        case SyntaxKind.UnicodeCharacterLiteral:
            return "«unicode character literal»";
        case SyntaxKind.Prose:
            return "«prose»";
        case SyntaxKind.Production:
            return "«production»";
        case SyntaxKind.OneOfList:
            return "«one of»";
        case SyntaxKind.RightHandSide:
            return "«right hand side»";
    }
    return "«" + SyntaxKind[kind] + "»";
}
exports.tokenToString = tokenToString;
//# sourceMappingURL=tokens.js.map
