export declare enum EmitFormat {
    markdown = 0,
    html = 1,
    ecmarkup = 2,
}
export interface CompilerOptions {
    noChecks?: boolean;
    noEmit?: boolean;
    noEmitOnError?: boolean;
    noStrictParametricProductions?: boolean;
    format?: EmitFormat;
    out?: string;
    emitLinks?: boolean;
    diagnostics?: boolean;
}
export declare function getDefaultOptions(): CompilerOptions;
export interface KnownOptions {
    [name: string]: KnownOption;
}
export interface KnownOption {
    shortName?: string;
    longName?: string;
    param?: string;
    type?: string | {
        [key: string]: any;
    };
    many?: boolean;
    description?: string;
    error?: string;
    aliasFor?: string[];
    hidden?: boolean;
    isUsage?: boolean;
    validate?: (key: string, value: string, raw: RawArguments) => boolean;
    convert?: (key: string, value: string, raw: RawArguments) => any;
}
export interface RawArgument {
    rawKey: string;
    formattedKey: string;
    value: any;
    option: KnownOption;
}
export interface RawArguments {
    args: RawArgument[];
    rest: string[];
}
export interface ParsedArguments {
    [key: string]: any;
    argv: string[];
    rest: string[];
}
export declare function parse<T extends ParsedArguments>(options: KnownOptions, args?: string[]): T;
export declare class UsageWriter {
    private margin;
    private padding;
    private remainder;
    private marginText;
    private paddingText;
    constructor(margin: number, padding: number);
    writeOption(left: string, right: string): void;
    writeln(text?: string): void;
    private fit(text, width);
}
export declare function usage(options: KnownOptions, margin?: number, printHeader?: (writer: UsageWriter) => void): void;
