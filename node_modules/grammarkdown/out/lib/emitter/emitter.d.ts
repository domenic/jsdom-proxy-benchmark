import { CancellationToken } from "prex";
import { DiagnosticMessages } from "../diagnostics";
import { CompilerOptions } from "../options";
import { Resolver } from "../checker";
import { StringWriter } from "../stringwriter";
import { TextRange } from "../core";
import { Node, SourceFile, UnicodeCharacterLiteral, UnicodeCharacterRange, Prose, Identifier, Parameter, ParameterList, OneOfList, Terminal, TerminalList, SymbolSet, EmptyAssertion, LookaheadAssertion, NoSymbolHereAssertion, LexicalGoalAssertion, ParameterValueAssertion, ProseAssertion, ProseFragmentLiteral, Argument, ArgumentList, Nonterminal, OneOfSymbol, LexicalSymbol, ButNotSymbol, SymbolSpan, RightHandSide, RightHandSideList, Production, Import, TextContent } from "../nodes";
export declare class Emitter {
    protected options: CompilerOptions;
    protected resolver: Resolver;
    protected writer: StringWriter;
    protected extension: string;
    private diagnostics;
    private sourceFile;
    private triviaPos;
    private cancellationToken;
    constructor(options: CompilerOptions, resolver: Resolver, diagnostics: DiagnosticMessages, cancellationToken?: CancellationToken);
    emit(node: SourceFile, writeFile?: (file: string, text: string) => void): void;
    protected writeFile(file: string, text: string, callback?: (file: string, text: string) => void): void;
    protected getOutputFilename(node: SourceFile): string;
    protected createWriter(): StringWriter;
    protected emitNode(node: Node): void;
    protected emitSourceFile(node: SourceFile): void;
    protected emitKeyword(node: Node): void;
    protected emitToken(node: Node): void;
    protected emitPlaceholder(node: LexicalSymbol): void;
    protected emitTerminal(node: Terminal): void;
    protected emitUnicodeCharacterLiteral(node: UnicodeCharacterLiteral): void;
    protected emitTextContent(node: TextContent): void;
    protected emitProse(node: Prose): void;
    protected emitIdentifier(node: Identifier): void;
    protected emitParameter(node: Parameter): void;
    protected emitParameterList(node: ParameterList): void;
    protected emitArgument(node: Argument): void;
    protected emitArgumentList(node: ArgumentList): void;
    protected emitProduction(node: Production): void;
    protected emitImport(node: Import): void;
    protected emitOneOfList(node: OneOfList): void;
    protected emitRightHandSideList(node: RightHandSideList): void;
    protected emitRightHandSide(node: RightHandSide): void;
    protected emitSymbolSpan(node: SymbolSpan): void;
    protected emitUnicodeCharacterRange(node: UnicodeCharacterRange): void;
    protected emitButNotSymbol(node: ButNotSymbol): void;
    protected emitOneOfSymbol(node: OneOfSymbol): void;
    protected emitNonterminal(node: Nonterminal): void;
    protected emitTerminalList(node: TerminalList): void;
    protected emitSymbolSet(node: SymbolSet): void;
    protected emitEmptyAssertion(node: EmptyAssertion): void;
    protected emitLookaheadAssertion(node: LookaheadAssertion): void;
    protected emitLexicalGoalAssertion(node: LexicalGoalAssertion): void;
    protected emitNoSymbolHereAssertion(node: NoSymbolHereAssertion): void;
    protected emitParameterValueAssertion(node: ParameterValueAssertion): void;
    protected emitProseAssertion(node: ProseAssertion): void;
    protected emitProseFragmentLiteral(node: ProseFragmentLiteral): void;
    protected encode(text: string): string;
    protected emitLeadingHtmlTriviaOfNode(node: Node): void;
    protected emitTrailingHtmlTriviaOfNode(node: Node): void;
    protected emitHtmlTrivia(range: TextRange): void;
}
