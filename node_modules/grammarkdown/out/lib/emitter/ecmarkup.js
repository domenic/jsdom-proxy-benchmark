"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var emitter_1 = require("./emitter");
var tokens_1 = require("../tokens");
var EcmarkupEmitter = (function (_super) {
    __extends(EcmarkupEmitter, _super);
    function EcmarkupEmitter() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.extension = ".emu.html";
        return _this;
    }
    EcmarkupEmitter.prototype.emitProduction = function (node) {
        var linkId = this.resolver.getProductionLinkId(node.name);
        this.emitLinkAnchor(linkId);
        this.writer.write("<emu-production name=\"");
        this.emitIdentifier(node.name);
        this.writer.write("\"");
        this.emitNode(node.parameterList);
        if (node.colonToken) {
            switch (node.colonToken.kind) {
                case tokens_1.SyntaxKind.ColonColonToken:
                    this.writer.write(" type=\"lexical\"");
                    break;
                case tokens_1.SyntaxKind.ColonColonColonToken:
                    this.writer.write(" type=\"regexp\"");
                    break;
            }
        }
        if (node.body) {
            if (node.body.kind === tokens_1.SyntaxKind.OneOfList) {
                this.writer.write(" oneof");
            }
            else if (node.body.kind === tokens_1.SyntaxKind.RightHandSide) {
                this.writer.write(" collapsed");
            }
        }
        this.writer.write(">");
        this.writer.indent();
        this.writer.writeln();
        this.emitNode(node.body);
        this.writer.dedent();
        this.writer.writeln();
        this.writer.write("</emu-production>");
        this.emitTrailingHtmlTriviaOfNode(node);
        this.writer.writeln();
    };
    EcmarkupEmitter.prototype.emitParameterList = function (node) {
        this.writer.write(" params=\"");
        for (var i = 0; i < node.elements.length; ++i) {
            if (i > 0) {
                this.writer.write(", ");
            }
            this.emitNode(node.elements[i]);
        }
        this.writer.write("\"");
    };
    EcmarkupEmitter.prototype.emitParameter = function (node) {
        this.emitIdentifier(node.name);
    };
    EcmarkupEmitter.prototype.emitOneOfList = function (node) {
        this.writer.write("<emu-rhs>");
        for (var i = 0; i < node.terminals.length; ++i) {
            if (i > 0) {
                this.writer.write(" ");
            }
            this.emitTextContent(node.terminals[i]);
        }
        this.writer.write("</emu-rhs>");
        this.emitTrailingHtmlTriviaOfNode(node);
        this.writer.writeln();
    };
    EcmarkupEmitter.prototype.emitRightHandSideList = function (node) {
        for (var _i = 0, _a = node.elements; _i < _a.length; _i++) {
            var rhs = _a[_i];
            this.emitNode(rhs);
        }
    };
    EcmarkupEmitter.prototype.emitRightHandSide = function (node) {
        var linkId = this.resolver.getRightHandSideLinkId(node, /*includePrefix*/ false);
        this.emitLinkAnchor(linkId);
        this.writer.write("<emu-rhs");
        if (linkId) {
            this.writer.write(" a=\"" + linkId + "\"");
        }
        var head = node.head;
        if (head.symbol.kind === tokens_1.SyntaxKind.ParameterValueAssertion) {
            this.writer.write(" constraints=\"");
            this.emitNode(head.symbol);
            this.writer.write("\"");
            head = head.next;
        }
        this.writer.write(">");
        if (head.next) {
            this.writer.indent();
            this.writer.writeln();
            this.emitNode(head);
            this.writer.dedent();
            this.writer.writeln();
        }
        else {
            this.emitNode(head);
        }
        this.writer.write("</emu-rhs>");
        this.emitTrailingHtmlTriviaOfNode(node);
        this.writer.writeln();
    };
    EcmarkupEmitter.prototype.emitSymbolSpan = function (node) {
        this.emitNode(node.symbol);
        if (node.next) {
            this.writer.writeln();
            this.emitNode(node.next);
        }
    };
    EcmarkupEmitter.prototype.emitPlaceholder = function (node) {
        this.writer.write("<emu-t placeholder>@</emu-t>");
    };
    EcmarkupEmitter.prototype.emitTerminal = function (node) {
        this.writer.write("<emu-t");
        if (node.questionToken) {
            this.writer.write(" optional");
        }
        this.writer.write(">");
        this.emitTextContent(node);
        this.writer.write("</emu-t>");
    };
    EcmarkupEmitter.prototype.emitNonterminal = function (node) {
        var linkId = this.resolver.getProductionLinkId(node.name);
        this.writer.write("<emu-nt");
        this.emitNode(node.argumentList);
        if (node.questionToken) {
            this.writer.write(" optional");
        }
        this.writer.write(">");
        this.emitNodeWithLink(node.name, linkId);
        this.writer.write("</emu-nt>");
    };
    EcmarkupEmitter.prototype.emitArgumentList = function (node) {
        this.writer.write(" params=\"");
        for (var i = 0; i < node.elements.length; ++i) {
            if (i > 0) {
                this.writer.write(", ");
            }
            this.emitNode(node.elements[i]);
        }
        this.writer.write("\"");
    };
    EcmarkupEmitter.prototype.emitArgument = function (node) {
        this.emitToken(node.operatorToken);
        this.emitNode(node.name);
    };
    EcmarkupEmitter.prototype.emitUnicodeCharacterRange = function (node) {
        this.writer.write("<emu-gprose>");
        this.emitTextContent(node.left);
        this.writer.write(" through ");
        this.emitTextContent(node.right);
        this.writer.write("</emu-gprose>");
    };
    EcmarkupEmitter.prototype.emitUnicodeCharacterLiteral = function (node) {
        this.writer.write("<emu-gprose");
        if (node.questionToken) {
            this.writer.write(" optional");
        }
        this.writer.write(">");
        this.emitTextContent(node);
        this.writer.write("</emu-gprose>");
    };
    EcmarkupEmitter.prototype.emitProse = function (node) {
        this.writer.write("<emu-gprose>");
        for (var _i = 0, _a = node.fragments; _i < _a.length; _i++) {
            var fragment = _a[_i];
            this.emitNode(fragment);
        }
        this.writer.write("</emu-gprose>");
    };
    EcmarkupEmitter.prototype.emitEmptyAssertion = function (node) {
        this.writer.write("<emu-gann>empty</emu-gann>");
    };
    EcmarkupEmitter.prototype.emitSymbolSet = function (node) {
        this.writer.write("{");
        for (var i = 0; i < node.elements.length; ++i) {
            if (i > 0) {
                this.writer.write(",");
            }
            this.writer.write(" ");
            this.emitNode(node.elements[i]);
        }
        this.writer.write(" }");
    };
    EcmarkupEmitter.prototype.emitLookaheadAssertion = function (node) {
        this.writer.write("<emu-gann>");
        switch (node.operatorToken.kind) {
            case tokens_1.SyntaxKind.ExclamationEqualsToken:
            case tokens_1.SyntaxKind.NotEqualToToken:
                this.writer.write("lookahead \u2260 ");
                break;
            case tokens_1.SyntaxKind.EqualsToken:
            case tokens_1.SyntaxKind.EqualsEqualsToken:
                this.writer.write("lookahead = ");
                break;
            case tokens_1.SyntaxKind.ElementOfToken:
            case tokens_1.SyntaxKind.LessThanMinusToken:
                this.writer.write("lookahead \u2208 ");
                break;
            case tokens_1.SyntaxKind.NotAnElementOfToken:
            case tokens_1.SyntaxKind.LessThanExclamationToken:
                this.writer.write("lookahead \u2209 ");
                break;
        }
        this.emitNode(node.lookahead);
        this.writer.write("</emu-gann>");
    };
    EcmarkupEmitter.prototype.emitLexicalGoalAssertion = function (node) {
        this.writer.write("<emu-gann>lexical goal ");
        var linkId = this.resolver.getProductionLinkId(node.symbol);
        this.emitNodeWithLink(node.symbol, linkId);
        this.writer.write("</emu-gann>");
    };
    EcmarkupEmitter.prototype.emitNoSymbolHereAssertion = function (node) {
        this.writer.write("<emu-gann>no ");
        if (node.symbols) {
            for (var i = 0; i < node.symbols.length; ++i) {
                if (i > 0) {
                    this.writer.write(" or ");
                }
                this.emitNode(node.symbols[i]);
            }
        }
        this.writer.write(" here</emu-gann>");
    };
    EcmarkupEmitter.prototype.emitParameterValueAssertion = function (node) {
        this.emitToken(node.operatorToken);
        this.emitNode(node.name);
    };
    EcmarkupEmitter.prototype.emitProseAssertion = function (node) {
        this.writer.write("<emu-gmod>");
        for (var _i = 0, _a = node.fragments; _i < _a.length; _i++) {
            var fragment = _a[_i];
            this.emitNode(fragment);
        }
        this.writer.write("</emu-gmod>");
    };
    EcmarkupEmitter.prototype.emitButNotSymbol = function (node) {
        this.emitNode(node.left);
        this.writer.write(" <emu-gmod>but not ");
        this.emitNode(node.right);
        this.writer.write("</emu-gmod>");
    };
    EcmarkupEmitter.prototype.emitOneOfSymbol = function (node) {
        this.writer.write("one of ");
        if (node.symbols) {
            for (var i = 0; i < node.symbols.length; ++i) {
                if (i > 0) {
                    this.writer.write(" or ");
                }
                this.emitNode(node.symbols[i]);
            }
        }
    };
    EcmarkupEmitter.prototype.emitTextContent = function (node) {
        if (node) {
            var text = node.text;
            this.writer.write(this.encode(text));
        }
    };
    EcmarkupEmitter.prototype.emitLinkAnchor = function (linkId) {
        if (linkId && this.options.emitLinks) {
            this.writer.write("<a name=\"" + linkId + "\"></a>");
        }
    };
    EcmarkupEmitter.prototype.emitNodeWithLink = function (node, linkId) {
        if (linkId && this.options.emitLinks) {
            this.writer.write("<a href=\"#" + linkId + "\">");
            this.emitNode(node);
            this.writer.write("</a>");
        }
        else {
            this.emitNode(node);
        }
    };
    return EcmarkupEmitter;
}(emitter_1.Emitter));
exports.EcmarkupEmitter = EcmarkupEmitter;
//# sourceMappingURL=ecmarkup.js.map
