import { Emitter } from "./emitter";
import { UnicodeCharacterLiteral, UnicodeCharacterRange, Prose, Parameter, ParameterList, OneOfList, Terminal, SymbolSet, EmptyAssertion, LookaheadAssertion, NoSymbolHereAssertion, LexicalGoalAssertion, ParameterValueAssertion, ProseAssertion, Argument, ArgumentList, Nonterminal, OneOfSymbol, LexicalSymbol, ButNotSymbol, SymbolSpan, RightHandSide, RightHandSideList, Production, TextContent } from "../nodes";
export declare class EcmarkupEmitter extends Emitter {
    protected extension: string;
    protected emitProduction(node: Production): void;
    protected emitParameterList(node: ParameterList): void;
    protected emitParameter(node: Parameter): void;
    protected emitOneOfList(node: OneOfList): void;
    protected emitRightHandSideList(node: RightHandSideList): void;
    protected emitRightHandSide(node: RightHandSide): void;
    protected emitSymbolSpan(node: SymbolSpan): void;
    protected emitPlaceholder(node: LexicalSymbol): void;
    protected emitTerminal(node: Terminal): void;
    protected emitNonterminal(node: Nonterminal): void;
    protected emitArgumentList(node: ArgumentList): void;
    protected emitArgument(node: Argument): void;
    protected emitUnicodeCharacterRange(node: UnicodeCharacterRange): void;
    protected emitUnicodeCharacterLiteral(node: UnicodeCharacterLiteral): void;
    protected emitProse(node: Prose): void;
    protected emitEmptyAssertion(node: EmptyAssertion): void;
    protected emitSymbolSet(node: SymbolSet): void;
    protected emitLookaheadAssertion(node: LookaheadAssertion): void;
    protected emitLexicalGoalAssertion(node: LexicalGoalAssertion): void;
    protected emitNoSymbolHereAssertion(node: NoSymbolHereAssertion): void;
    protected emitParameterValueAssertion(node: ParameterValueAssertion): void;
    protected emitProseAssertion(node: ProseAssertion): void;
    protected emitButNotSymbol(node: ButNotSymbol): void;
    protected emitOneOfSymbol(node: OneOfSymbol): void;
    protected emitTextContent(node: TextContent): void;
    private emitLinkAnchor(linkId);
    private emitNodeWithLink(node, linkId);
}
