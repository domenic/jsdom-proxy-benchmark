"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("./core");
var metadataProperty = "_metadata@" + Math.random().toString(16);
function defineMetadata(target, key, value) {
    var view = getObjectMetadataView(target, /*create*/ true);
    core_1.Dictionary.set(view, key, value);
}
exports.defineMetadata = defineMetadata;
function definePropertyMetadata(target, propertyKey, key, value) {
    var view = getPropertyMetadataView(target, propertyKey, /*create*/ true);
    core_1.Dictionary.set(view, key, value);
}
exports.definePropertyMetadata = definePropertyMetadata;
function hasMetadata(target, key, options) {
    if (options === void 0) { options = {}; }
    for (var object = target; object; object = Object.getPrototypeOf(object)) {
        var view = getObjectMetadataView(target, /*create*/ false);
        if (view && core_1.Dictionary.has(view, key)) {
            return true;
        }
        if (!options.inherited) {
            break;
        }
    }
    return false;
}
exports.hasMetadata = hasMetadata;
function getMetadata(target, key, options) {
    if (options === void 0) { options = {}; }
    for (var object = target; object; object = Object.getPrototypeOf(object)) {
        var view = getObjectMetadataView(target, /*create*/ false);
        if (view && core_1.Dictionary.has(view, key)) {
            return core_1.Dictionary.get(view, key);
        }
        if (!options.inherited) {
            break;
        }
    }
    return undefined;
}
exports.getMetadata = getMetadata;
function hasPropertyMetadata(target, propertyKey, key, options) {
    if (options === void 0) { options = {}; }
    for (var object = target; object; object = Object.getPrototypeOf(object)) {
        var view = getPropertyMetadataView(target, propertyKey, /*create*/ false);
        if (view && core_1.Dictionary.has(view, key)) {
            return true;
        }
        if (!options.inherited) {
            break;
        }
    }
    return false;
}
exports.hasPropertyMetadata = hasPropertyMetadata;
function getPropertyMetadata(target, propertyKey, key, options) {
    if (options === void 0) { options = {}; }
    for (var object = target; object; object = Object.getPrototypeOf(object)) {
        var view = getPropertyMetadataView(target, propertyKey, /*create*/ false);
        if (view && core_1.Dictionary.has(view, key)) {
            return core_1.Dictionary.get(view, key);
        }
        if (!options.inherited) {
            break;
        }
    }
    return undefined;
}
exports.getPropertyMetadata = getPropertyMetadata;
function metadata(key, value) {
    return function (target, propertyKey) {
        if (typeof propertyKey === "undefined") {
            defineMetadata(target, key, value);
        }
        else {
            definePropertyMetadata(target, propertyKey, key, value);
        }
    };
}
exports.metadata = metadata;
function getMetadataView(target, create) {
    if (!Object.prototype.hasOwnProperty.call(target, metadataProperty)) {
        if (!create) {
            return undefined;
        }
        Object.defineProperty(target, metadataProperty, {
            value: {}
        });
    }
    return target[metadataProperty];
}
function getObjectMetadataView(target, create) {
    var view = getMetadataView(target, create);
    if (view) {
        if (!view.metadata && create) {
            view.metadata = new core_1.Dictionary();
        }
        return view.metadata;
    }
    return undefined;
}
function getPropertyMetadataView(target, name, create) {
    var view = getMetadataView(target, create);
    if (view) {
        if (!view.properties && create) {
            view.properties = new core_1.Dictionary();
        }
        if (view.properties) {
            if (!core_1.Dictionary.has(view.properties, name) && create) {
                core_1.Dictionary.set(view.properties, name, new core_1.Dictionary());
            }
            return core_1.Dictionary.get(view.properties, name);
        }
    }
    return undefined;
}
//# sourceMappingURL=metadata.js.map
