/*!
 *  Copyright 2015 Ron Buckton (rbuckton@chronicles.org)
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
import { CancellationToken } from "prex";
import { TextRange } from "./core";
import { SyntaxKind } from "./tokens";
import { DiagnosticMessages } from "./diagnostics";
export declare class Scanner {
    private pos;
    private len;
    private startPos;
    private tokenPos;
    private token;
    private tokenValue;
    private text;
    private tokenIsUnterminated;
    private indents;
    private queue;
    private copyQueueOnWrite;
    private copyIndentsOnWrite;
    private filename;
    private diagnostics;
    private proseStartToken;
    private cancellationToken;
    constructor(filename: string, text: string, diagnostics: DiagnosticMessages, cancellationToken?: CancellationToken);
    getPos(): number;
    getLen(): number;
    getStartPos(): number;
    getTokenPos(): number;
    getToken(): SyntaxKind;
    getTokenText(): string;
    getTokenValue(): string;
    getDiagnostics(): DiagnosticMessages;
    scan(): SyntaxKind;
    private dequeueOrScanToken();
    speculate<T>(callback: () => T, isLookahead: boolean): T;
    private scanToken();
    private scanIndent();
    private scanLine();
    private skipLineTerminator();
    private scanLineTerminator();
    private skipWhiteSpace();
    private scanProse();
    private nextLineIsProse();
    private scanHtmlTrivia();
    private scanString(quote, kind);
    private scanEscapeSequence();
    private scanHexDigits(count, mustMatchCount?);
    private scanNumber();
    private getIdentifierToken();
    private hasQueuedToken();
    private enqueueToken(token);
    private dequeueToken();
}
export declare function scanHtmlTrivia(text: string, pos: number, end: number): TextRange[];
