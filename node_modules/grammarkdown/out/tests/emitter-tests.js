"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var path_1 = require("path");
var grammar_1 = require("../lib/grammar");
var host_1 = require("../lib/host");
var options_1 = require("../lib/options");
var resources_1 = require("./resources");
var diff_1 = require("./diff");
var prex_1 = require("prex");
var chai_1 = require("chai");
describe("Emitter", function () {
    defineTests();
    it("cancelable", function () {
        var cts = new prex_1.CancellationTokenSource();
        var grammar = new grammar_1.Grammar(["cancelable.grammar"], {}, host_1.Host.getHost({
            readFile: function (file) { return ""; },
            writeFile: function (file, content) { }
        }), /*oldGrammar*/ undefined, cts.token);
        grammar.check(/*sourceFile*/ undefined);
        cts.cancel();
        chai_1.assert.throws(function () { return grammar.emit(/*sourceFile*/ undefined); });
    });
    function defineTests() {
        for (var _i = 0, _a = resources_1.getGrammarFiles(); _i < _a.length; _i++) {
            var file = _a[_i];
            defineTest(path_1.basename(file), file, ".md", options_1.EmitFormat.markdown);
            defineTest(path_1.basename(file), file, ".emu.html", options_1.EmitFormat.ecmarkup);
            defineTest(path_1.basename(file), file, ".html", options_1.EmitFormat.html, true);
        }
    }
    function defineTest(name, file, extname, format, emitLinks) {
        it(name + " " + options_1.EmitFormat[format] + " output", function () {
            var output;
            var grammar = new grammar_1.Grammar([file], { format: format, emitLinks: emitLinks });
            grammar.emit(/*sourceFile*/ undefined, function (_, _output) { return output = _output; });
            diff_1.compareBaseline(diff_1.writeOutput(name, extname, output));
        });
    }
});
//# sourceMappingURL=emitter-tests.js.map
