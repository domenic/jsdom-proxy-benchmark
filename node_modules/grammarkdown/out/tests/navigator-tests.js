"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var diagnostics_1 = require("../lib/diagnostics");
var parser_1 = require("../lib/parser");
var navigator_1 = require("../lib/navigator");
var tokens_1 = require("../lib/tokens");
var assert = require("assert");
describe("Navigator", function () {
    var es6GrammarText = "\n// A.1 - Lexical Grammar\n\nSourceCharacter ::\n\t> any Unicode code point\n\nInputElementDiv ::\n\tWhiteSpace\n\tLineTerminator\n\tComment\n\tCommonToken\n\tDivPunctuator\n\tRightBracePunctuator\n\nInputElementRegExp ::\n\tWhiteSpace\n\tLineTerminator\n\tComment\n\tCommonToken\n\tRightBracePunctuator\n\tRegularExpressionLiteral\n\n// ...\n\nExportSpecifier :\n\tIdentifierName\n\tIdentifierName `as` IdentifierName\n".trim();
    function getNavigator() {
        var diagnostics = new diagnostics_1.DiagnosticMessages();
        var parser = new parser_1.Parser(diagnostics);
        var sourceFile = parser.parseSourceFile("es6.grammar", es6GrammarText);
        var navigator = new navigator_1.NodeNavigator(sourceFile);
        return { sourceFile: sourceFile, navigator: navigator };
    }
    it("initial state", function () {
        var _a = getNavigator(), sourceFile = _a.sourceFile, navigator = _a.navigator;
        assert.strictEqual(navigator.getRoot(), sourceFile);
        assert.strictEqual(navigator.getNode(), sourceFile);
        assert.strictEqual(navigator.getParent(), undefined);
        assert.strictEqual(navigator.getKind(), tokens_1.SyntaxKind.SourceFile);
        assert.strictEqual(navigator.getDepth(), 0);
        assert.strictEqual(navigator.getName(), undefined);
        assert.strictEqual(navigator.getOffset(), 0);
        assert.strictEqual(navigator.getArray(), undefined);
        assert.strictEqual(navigator.isArray(), false);
        assert.strictEqual(navigator.hasChildren(), true);
    });
    it("moveToFirstChild", function () {
        var _a = getNavigator(), sourceFile = _a.sourceFile, navigator = _a.navigator;
        var moved = navigator.moveToFirstChild();
        assert.strictEqual(moved, true);
        assert.strictEqual(navigator.getRoot(), sourceFile);
        assert.strictEqual(navigator.getNode(), sourceFile.elements[0]);
        assert.strictEqual(navigator.getParent(), sourceFile);
        assert.strictEqual(navigator.getKind(), tokens_1.SyntaxKind.Production);
        assert.strictEqual(navigator.getDepth(), 1);
        assert.strictEqual(navigator.getName(), "elements");
        assert.strictEqual(navigator.getOffset(), 0);
        assert.notStrictEqual(navigator.getArray(), undefined);
        assert.strictEqual(navigator.isArray(), true);
        assert.strictEqual(navigator.hasChildren(), true);
    });
    it("moveToLastChild", function () {
        var _a = getNavigator(), sourceFile = _a.sourceFile, navigator = _a.navigator;
        var moved = navigator.moveToLastChild();
        assert.strictEqual(moved, true);
        assert.strictEqual(navigator.getRoot(), sourceFile);
        assert.strictEqual(navigator.getNode(), sourceFile.elements[sourceFile.elements.length - 1]);
        assert.strictEqual(navigator.getParent(), sourceFile);
        assert.strictEqual(navigator.getKind(), tokens_1.SyntaxKind.Production);
        assert.strictEqual(navigator.getDepth(), 1);
        assert.strictEqual(navigator.getName(), "elements");
        assert.strictEqual(navigator.getOffset(), sourceFile.elements.length - 1);
        assert.notStrictEqual(navigator.getArray(), undefined);
        assert.strictEqual(navigator.isArray(), true);
        assert.strictEqual(navigator.hasChildren(), true);
    });
    it("moveToNextSibling (in array)", function () {
        var _a = getNavigator(), sourceFile = _a.sourceFile, navigator = _a.navigator;
        navigator.moveToFirstChild();
        var moved = navigator.moveToNextSibling();
        assert.strictEqual(moved, true);
        assert.strictEqual(navigator.getRoot(), sourceFile);
        assert.strictEqual(navigator.getNode(), sourceFile.elements[1]);
        assert.strictEqual(navigator.getParent(), sourceFile);
        assert.strictEqual(navigator.getKind(), tokens_1.SyntaxKind.Production);
        assert.strictEqual(navigator.getDepth(), 1);
        assert.strictEqual(navigator.getName(), "elements");
        assert.strictEqual(navigator.getOffset(), 1);
        assert.notStrictEqual(navigator.getArray(), undefined);
        assert.strictEqual(navigator.isArray(), true);
        assert.strictEqual(navigator.hasChildren(), true);
    });
    it("moveToNextSibling (in object)", function () {
        var _a = getNavigator(), sourceFile = _a.sourceFile, navigator = _a.navigator;
        navigator.moveToFirstChild();
        var movedToFirstChild = navigator.moveToFirstChild();
        var production = navigator.getParent();
        var firstChild = navigator.getNode();
        var firstChildName = navigator.getName();
        var movedToSibling = navigator.moveToNextSibling();
        var nextSibling = navigator.getNode();
        var nextSiblingName = navigator.getName();
        assert.strictEqual(movedToFirstChild, true);
        assert.strictEqual(movedToSibling, true);
        assert.strictEqual(production.kind, tokens_1.SyntaxKind.Production);
        assert.strictEqual(firstChildName, "name");
        assert.strictEqual(firstChild, production.name);
        assert.strictEqual(nextSiblingName, "colonToken");
        assert.strictEqual(nextSibling, production.colonToken);
    });
    it("moveTopPreviousSibling (in array)", function () {
        var _a = getNavigator(), sourceFile = _a.sourceFile, navigator = _a.navigator;
        navigator.moveToLastChild();
        var moved = navigator.moveToPreviousSibling();
        assert.strictEqual(moved, true);
        assert.strictEqual(navigator.getRoot(), sourceFile);
        assert.strictEqual(navigator.getNode(), sourceFile.elements[sourceFile.elements.length - 2]);
        assert.strictEqual(navigator.getParent(), sourceFile);
        assert.strictEqual(navigator.getKind(), tokens_1.SyntaxKind.Production);
        assert.strictEqual(navigator.getDepth(), 1);
        assert.strictEqual(navigator.getName(), "elements");
        assert.strictEqual(navigator.getOffset(), sourceFile.elements.length - 2);
        assert.notStrictEqual(navigator.getArray(), undefined);
        assert.strictEqual(navigator.isArray(), true);
        assert.strictEqual(navigator.hasChildren(), true);
    });
    it("moveTopPreviousSibling (in object)", function () {
        var _a = getNavigator(), sourceFile = _a.sourceFile, navigator = _a.navigator;
        navigator.moveToFirstChild();
        var movedToLastChild = navigator.moveToLastChild();
        var production = navigator.getParent();
        var lastChild = navigator.getNode();
        var lastChildName = navigator.getName();
        var movedToSibling = navigator.moveToPreviousSibling();
        var previousSibling = navigator.getNode();
        var previousSiblingName = navigator.getName();
        assert.strictEqual(movedToLastChild, true);
        assert.strictEqual(movedToSibling, true);
        assert.strictEqual(production.kind, tokens_1.SyntaxKind.Production);
        assert.strictEqual(lastChildName, "body");
        assert.strictEqual(lastChild, production.body);
        assert.strictEqual(previousSiblingName, "colonToken");
        assert.strictEqual(previousSibling, production.colonToken);
    });
    it("moveToPosition", function () {
        var _a = getNavigator(), sourceFile = _a.sourceFile, navigator = _a.navigator;
        var moved = navigator.moveToPosition({ line: 14, character: 9 });
        assert.strictEqual(moved, true);
        assert.strictEqual(navigator.getKind(), tokens_1.SyntaxKind.Identifier);
        assert.strictEqual(navigator.getName(), "name");
        var production = sourceFile.elements[2];
        var list = production.body;
        var rhs = list.elements[0];
        var symbol = rhs.head.symbol;
        assert.strictEqual(navigator.getNode(), symbol.name);
    });
});
//# sourceMappingURL=navigator-tests.js.map
